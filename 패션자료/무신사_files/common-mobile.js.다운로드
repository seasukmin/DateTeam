(function () {
  'use strict';

  const makeDraggable = (sliderElement) => {
      if (!sliderElement.classList.contains('set-draggable')) {
          sliderElement.classList.add('set-draggable');
      }
      let isDown = false;
      let startX;
      let scrollLeft;
      const setChildrenPointerEvents = (isSet) => {
          Array.from(sliderElement.children).forEach((child) => {
              if (isSet) {
                  child.style.setProperty('pointer-events', 'none');
              }
              else {
                  child.style.removeProperty('pointer-events');
              }
          });
      };
      const handleMouseDown = (e) => {
          isDown = true;
          startX = e.pageX - sliderElement.offsetLeft;
          scrollLeft = sliderElement.scrollLeft;
          sliderElement.style.cursor = 'grabbing';
      };
      const handleMouseFocused = () => {
          isDown = false;
          sliderElement.style.cursor = '';
      };
      const handleMouseUp = () => {
          handleMouseFocused();
          setChildrenPointerEvents(false);
          sliderElement.classList.remove('grabbing');
      };
      const handleMouseMove = (e) => {
          if (!isDown)
              return;
          e.preventDefault();
          const x = e.pageX - sliderElement.offsetLeft;
          const walk = x - startX;
          sliderElement.classList.add('grabbing');
          if (Math.abs(walk) > 20) {
              setChildrenPointerEvents(true);
          }
          sliderElement.scrollLeft = scrollLeft - walk;
      };
      sliderElement.addEventListener('mousedown', handleMouseDown);
      sliderElement.addEventListener('mouseenter', handleMouseFocused);
      sliderElement.addEventListener('mouseup', handleMouseUp);
      sliderElement.addEventListener('mousemove', handleMouseMove);
      return () => {
          sliderElement.removeEventListener('mousedown', handleMouseDown);
          sliderElement.removeEventListener('mouseenter', handleMouseFocused);
          sliderElement.removeEventListener('mouseup', handleMouseUp);
          sliderElement.removeEventListener('mousemove', handleMouseMove);
      };
  };

  if (!window.mss) {
      window.mss = {};
  }
  window.mss.makeDraggable = makeDraggable;
  window.addEventListener('DOMContentLoaded', () => {
      const draggableElemenmts = document.querySelectorAll('.set-draggable');
      draggableElemenmts.forEach((el) => {
          makeDraggable(el);
      });
  });

})();
